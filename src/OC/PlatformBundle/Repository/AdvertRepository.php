<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{

    public function myFindAll()
    {
        $queryBuilder = $this->createQueryBuilder('a');
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function myFindOne($id)
    {
        try {
            $queryBuidler = $this->createQueryBuilder('a');
            $queryBuidler->where('a.id = :id');
            $queryBuidler->setParameter('a.id', $id);
            $query = $queryBuidler->getQuery();
            return $query->getOneOrNullResult();
        } catch (NonUniqueResultException $ex) {
            var_dump($ex);
        }
    }

    public function findByAuthorAndDate($author, $date)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.author = :author')
            ->andWhere('a.date < :date')
            ->setParameter('author', $author)
            ->setParameter('date', $date);

        return $qb->getQuery()->getResult();
    }

    public function findOneWithApplications($id)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.id = :id')
            ->leftJoin('a.applications', 'app')
            ->addSelect('app')
            ->setParameter('id', $id);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getAdvertWithCategories(array $categoryNames)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.categories', 'cat')
            ->addSelect('cat')
            ->where($qb->expr()->in('cat.name', $categoryNames));

        return $qb->getQuery()->getResult();
    }

    public function findLastAdverts($limit)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->orderBy('a.date', 'desc')
            ->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

    public function getAdverts($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.image', 'i')
            ->addSelect('i')
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
//            ->leftJoin('a.advertSkills', 'as')
//            ->addSelect('as')
//            ->orderBy('a.date', 'DESC')
            ->getQuery();

        $query->setFirstResult(($page - 1) * $nbPerPage);
        $query->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    public function getLastAdvertsByDays($days)
    {
        $date = new \DateTime();
        $date->modify("-$days day");

        $qb = $this->createQueryBuilder('a');
        $qb->where("a.updateAt < :date")
            ->orWhere('a.updateAt IS NULL AND a.date < :date')
            ->andWhere('a.applications IS EMPTY')
            ->setParameter('date', $date);

        return $qb->getQuery()->getResult();
    }
}
